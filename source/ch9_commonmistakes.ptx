<?xml version="1.0"?>

<!-- Generated by Docutils 0.19 -->
<chapter xml:id="common-mistakes">
    <title>Common Mistakes</title>

    <introduction>
    </introduction>

    <section xml:id="mistakes-happen">
        <title>Mistakes Happen!</title>
        <p>
          Making mistakes is a very natural part of learning Javaâ€”or any other programming language. In fact, mistakes are an absolutely essential part of the learning process! So, try not to feel discouraged when you encounter errors in your code. Instead, view each mistake as an opportunity to deepen your understanding. Every programmer, no matter how experienced, encounters errors in their code. The key is to learn how to identify and correct these errors while also learning from them. 
        </p>
        <p>
          The good news is that most errors happen for just a few common reasons, and once you recognize the patterns, they become much easier to fix. This chapter focuses on those typical mistakes and how to understand and correct them.
        </p>
        <p>
          One of the best ways to correct these errors is to slow down and test your code in small pieces. Write a few lines, compile, and check the output before moving on. If something goes wrong, read the first error message very carefully, and focus on fixing one problem at a time. Often, solving the first error helps fix others that follow.
        </p>
        <p>
          A simple debugging technique is to use <c>System.out.println()</c> to print out variable values. If you're not sure whether a part of your code is running correctly or what a variable contains, you can print it out. This can help you to check your assumptions and narrow down where something is going wrong.
        </p>

        <p>
            Consider the following example where we have a method that multiplies a number by two. We can add print statements to help us debug the code:
        </p>
        <program language="java" interactive="activecode" line-numbers="yes">
            <code>
            // DebugExample.java
            public class DebugExample {   

                public static void main(String[] args) {
                    int number = 10;
                    int result = multiplyByTwo(number);
                    // Debugging: print the result to verify the method worked
                    System.out.println("Result after multiplying: " + result);
                }

                public static int multiplyByTwo(int value) {
                    // Debugging: print the input value to check it's being passed correctly
                    System.out.println("multiplyByTwo received: " + value);
                    return value * 2;
                }
            }//End of class
            </code>
        </program>
        <p>
          In the example above, <c>System.out.println()</c> is used inside both <c>main</c> and <c>multiplyByTwo()</c> to trace what values are being passed and returned. This kind of print-based debugging can quickly reveal logic errors, unexpected behavior, or whether a method is even being called. However, overuse of this technique will often take more time than using the debugging tools that are built into your IDE.
        </p>
        <p>
            Useful tools in the built-in Java debugger can help you step through your code, inspect variables, and evaluate expressions at runtime. Familiarizing yourself with these tools can greatly enhance your debugging efficiency.
        </p>
        <p>
          Above all, when you encounter an error, be patient with yourself. Every mistake you make is an opportunity to learn.
        </p>
    </section>

        <section xml:id="forgetting-a-semicolon">
        <title>Forgetting a Semicolon</title>
        <p>
            A common mistake in Java is to forget that every statement must end with a semicolon (<c>;</c>).
        </p>
        <program language="java" interactive="activecode" line-numbers="yes">
            <code>
            // Histo.java
            import java.util.Scanner; // Imports Scanner
                                        
            public class Histo {         // Class declaration
                                        
                public static void main(String[] args) { // Main method declaration
                    Scanner data = null    // The error will point here
                    System.out.println("This line will not compile.");
                }// End of main method
            }//End of class
        </code>
        </program>
        <p>
            The error "';' expected" on line 7 of <c>Histo.java</c> means that a semicolon is missing at the end of the statement <c>Scanner data = null</c>. In Java, every statement must be terminated with a semicolon (<c>;</c>) to indicate its completion. The arrow points to <c>null</c> because that's where the compiler expected to find the semicolon.
        </p>

    </section>

    <section xml:id="forgetting-to-declare-your-variables">
        <title>Forgetting to declare your variables</title>
        <p>
            In Python, you can use a variable without declaring it first, but in Java, you must declare all variables before using them.
            If you try to use a variable that has not been declared, the Java compiler will give you an error message like this:
        </p>
        <program language="java" interactive="activecode" line-numbers="yes">
            <code>
            import java.util.ArrayList; // Import necessary class

            public class Main { // Class declaration

                // Main method declaration
                public static void main(String[] args) { 

                    // Attempt to use 'count' without declaration
                    count = new ArrayList&lt;Integer&gt;(10);

                    // This line won't be reached due to the error.
                    System.out.println("ArrayList created."); 

                } // End of main method
            } // End of class    
        </code>
        </program>
        <p>
            The 'cannot find symbol' error for the variable <c>count</c> on line 6 indicates that <c>count</c> was used before it was declared within the <c>Histo</c> class. In Java, all variables must be explicitly declared with a data type (e.g., <c>int</c>, <c>String</c>, <c>ArrayList&lt;Integer&gt;</c>) before they can be assigned a value or referenced in any way. The arrow in the error message points to where the undeclared variable <c>count</c> was first encountered. To resolve this, <c>count</c> needs to be declared with its appropriate type (e.g., <c>ArrayList&lt;Integer&gt; count;</c>) before any attempt to initialize or use it.
        </p>

    </section>

    <section xml:id="not-importing-a-class">
        <title>Not importing a class</title>
        <p>
                In Python, many classes are available by default. However, in Java, you must explicitly import most classes from external packages that you want to use.
            </p>
        <program language="java" interactive="activecode" line-numbers="yes">
            
            <code>
            // Histo.java
            public class Histo { // Class declaration

                public static void main(String[] args) { // Main method declaration
                    // This line will cause the "cannot find symbol" error
                    Scanner data = null; 

                } // End of main method
            } //  End of class
        </code>
        </program>
        <p>
             You may notice that this error message looks similar to the previous one, however, it has an entirely different cause. In Java, classes like <c>Scanner</c> that are part of external packages (like <c>java.util</c>) must be explicitly imported into your source file. Java does not automatically recognize these classes. To resolve this error, you need to add an import statement for the <c>Scanner</c> class at the beginning of your <c>Histo.java</c> file, typically import <c>java.util.Scanner;</c>.
        </p>

    </section>

    <section xml:id="forgetting-to-use-the-new-keyword-to-create-an-object">
        <title>Forgetting to use the new keyword to create an object</title>
        <p>
            Unlike Python, where you can create a new object without explicitly using a keyword, Java requires the <c>new</c> keyword to instantiate a new object.
        </p>
        <program language="java" interactive="activecode" line-numbers="yes">
            <code>
                // Histo.java // The filename for this example
                import java.io.File;    // Import the File class, needed for file operations
                import java.util.Scanner; // Import the Scanner class, now correctly imported

                public class Histo { // Class declaration

                    public static void main(String[] args) { // Main method declaration
                        
                        Scanner data = Scanner(new File("test.dat")); // This Line will cause an error

                    } // End of main method
                } // End of class
            </code>
        </program>
        <p>
          This error message occurs when you forget to use the <c>new</c> keyword to instantiate an object. 
          Specifically, on line 8 of <c>Histo.java</c>, <c>data = Scanner(new File("test.dat"));</c> leads to a 'cannot find symbol' error. 
          While the message states 'symbol: method Scanner(File)', this can be misleading. 
          Java incorrectly interprets <c>Scanner()</c> as an attempt to call a static method named <c>Scanner</c> within the <c>Histo</c> class 
          (or an inherited one). However, <c>Scanner</c> is a constructor of the <c>Scanner</c> class, not a standalone method, 
          and therefore requires the new keyword (e.g., <c>data = new Scanner(new File("test.dat"));</c>) to create a new <c>Scanner</c> object.

        </p>

    </section>

    <section xml:id="forgetting-to-declare-the-kind-of-object-in-a-container">
        <title>Forgetting to declare the kind of object in a container</title>
        <p>
            Java is a statically typed language, meaning you must specify the type of objects that can be stored in a container like an <c>ArrayList</c>. If you forget to declare the type, the compiler will give you an error.
        </p>
        <program language="java" interactive="activecode" line-numbers="yes">
            <code>
                // UncheckedWarningDemo.java 
                import java.util.ArrayList; // Import the ArrayList class

                public class UncheckedWarningDemo { // Class declaration

                    public static void main(String[] args) { // Main method declaration

                        // This is where the potential for unchecked operations begins.
                        ArrayList rawList = new ArrayList();

                        rawList.add("Hello");
                        //This is the line that will throw an error
                        System.out.println("Element added: " + rawList.get(0));
                    } // End of main method
                } // End of class
            </code>
        </program>
        <p>
            This is a compiler warning, not an error, indicating a potential type safety issue. It occurs because you are calling the <c>add()</c> method on <c>rawList</c>, which is an <c>ArrayList</c> used as a raw type (i.e., without specifying a generic type like <c>&lt;String&gt;</c> or <c>&lt;Integer&gt;</c>).
        </p>
                
        <p>
            When <c>ArrayList</c> is used as a raw type, the compiler cannot guarantee the type of elements being added or retrieved, leading to "unchecked" operations. The <c>E extends Object</c> part refers to the generic type parameter <c>E</c> that <c>ArrayList</c> should have, which defaults to <c>Object</c> when the type is not specified, making the <c>add()</c> call unchecked. This can lead to <c>ClassCastExceptions</c> at runtime if incompatible types are later retrieved and cast.
        </p>

    </section>

    <section xml:id="common-mistakes-summary">
    <title>Summary &amp; Reading Questions</title>
    <p><ol label="1">
        <li>
            <p>In Java, every variable must be declared with its type before use; undeclared variables cause compilation errors.</p>
        </li>
        <li>
            <p>Java requires explicit import statements for classes from external packages (e.g., <c>java.util.Scanner</c>); otherwise, you get "cannot find symbol" errors.</p>
        </li>
        <li>
            <p>The <c>new</c> keyword is mandatory when creating new objects; forgetting it leads to errors as Java treats the constructor call incorrectly.</p>
        </li>
        <li>
            <p>Every Java statement must end with a semicolon (<c>;</c>); missing semicolons cause syntax errors.</p>
        </li>
        <li>
            <p>Java uses generics for type safety in containers like <c>ArrayList</c>; forgetting to specify the contained type leads to compiler warnings about unchecked operations.</p>
        </li>
        <li>
            <p>Compiler error messages may sometimes be misleading; understanding common mistakes helps quickly identify the root cause.</p>
        </li>
    </ol></p>
    <reading-questions xml:id="rqs-common-mistakes">
        <exercise label="cm-1">
            <statement>
                <p>What happens if you use a variable in Java without declaring it first?</p>
            </statement>
            <choices>
                <choice correct="yes">
                    <statement><p>The compiler gives an error indicating the variable cannot be found.</p></statement>
                    <feedback><p>Correct! Java requires all variables to be declared before use.</p></feedback>
                </choice>
                <choice>
                    <statement><p>The variable is automatically declared as type <c>Object</c>.</p></statement>
                    <feedback><p>No. Java does not implicitly declare variables.</p></feedback>
                </choice>
                <choice>
                    <statement><p>The program compiles but throws an error at runtime.</p></statement>
                    <feedback><p>No. This is a compile-time error.</p></feedback>
                </choice>
                <choice>
                    <statement><p>Java ignores the variable and continues compiling.</p></statement>
                    <feedback><p>No. Java will stop compiling with an error.</p></feedback>
                </choice>
            </choices>
        </exercise>
        <exercise label="cm-2">
            <statement>
                <p>Why must you include import statements for classes like <c>Scanner</c>?</p>
            </statement>
            <choices>
                <choice correct="yes">
                    <statement><p>Because these classes belong to external packages and are not automatically available.</p></statement>
                    <feedback><p>Correct! Java requires explicit imports for external classes.</p></feedback>
                </choice>
                <choice>
                    <statement><p>Because Java does not support standard input without imports.</p></statement>
                    <feedback><p>No. Standard input is supported but needs the <c>Scanner</c> class explicitly imported.</p></feedback>
                </choice>
                <choice>
                    <statement><p>Because the classes are only available in Python, not Java.</p></statement>
                    <feedback><p>No. This is a Java-specific requirement.</p></feedback>
                </choice>
                <choice>
                    <statement><p>Because the compiler ignores unknown classes without imports.</p></statement>
                    <feedback><p>No. It causes a compile error instead.</p></feedback>
                </choice>
            </choices>
        </exercise>
        <exercise label="cm-3">
            <statement>
                <p>What warning occurs when you use an <c>ArrayList</c> without specifying a type?</p>
            </statement>
            <choices>
                <choice correct="yes">
                    <statement><p>An "unchecked" warning indicating potential type safety issues.</p></statement>
                    <feedback><p>Correct! Using raw types disables generic type checks.</p></feedback>
                </choice>
                <choice>
                    <statement><p>A syntax error.</p></statement>
                    <feedback><p>No. This is a compiler warning, not an error.</p></feedback>
                </choice>
                <choice>
                    <statement><p>A runtime exception.</p></statement>
                    <feedback><p>No. It only warns about possible runtime errors.</p></feedback>
                </choice>
                <choice>
                    <statement><p>A logical error in the program.</p></statement>
                    <feedback><p>No. The warning points out type safety concerns.</p></feedback>
                </choice>
            </choices>
        </exercise>
    </reading-questions>
</section>
</chapter>
